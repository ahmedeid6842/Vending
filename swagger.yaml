openapi: "3.0.0"
info:
  description: "This API provides endpoints for a vending machine that is accessible to both buyers and sellers. The API includes endpoints for adding, updating, and removing products, as well as depositing coins and making purchases. Authentication and authorization are used to control access to the endpoints based on user role (buyer or seller), and caching is implemented to improve performance. The API requires authentication tokens for requests that require a specific role (buyer or seller), and uses a time-to-live (TTL) value to cache frequently-requested queries."
  version: "1.0.0"
  title: "Vending Machine API"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ahmedeid6842/Vending/1.0.0
  - url: "http://localhost:3000/"
paths:
  /user/register:
    post:
      tags:
        - User
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        '201':
          description: Created
          headers:
            Set-Cookie:
              description: Access token for authentication
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistrationResponse"

  /user/login:
    post:
      tags:
        - User
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              description: Access token for authentication
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLoginResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/logout:
    get:
      tags:
        - User
      summary: Logout
      security:
        - accessJWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user:
    get:
      tags:
        - User    
      summary: Get current user
      description: Returns the profile of the currently logged-in user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
      security:
        - accessJWT: []
    put:
      tags:
        - User
      summary: Update current user
      description: Updates the profile of the currently logged-in user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName:
                  type: string
                  minLength: 8
                password:
                  type: string
                  minLength: 8
                  pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
                role:
                  type: string
                  enum: [buyer, seller]
              required:
                - userName
                - password
                - role
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
      security:
        - accessJWT: []
    delete:
      tags:
        - User  
      summary: Delete current user
      description: Deletes the profile of the currently logged-in user.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      security:
        - accessJWT: []
  /product:
    post:
      tags:
        - Product
      summary: Create a product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: The created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
    get:
      tags:
        - Product
      summary: Get products
      parameters:
        - name: page
          in: query
          description: The page number of the returned products (for pagination)
          required: true
          schema:
            type: integer
        - name: name
          in: query
          description: The name of the product to get
          required: false
          schema:
            type: string
        - name: cost
          in: query
          description: The cost of the product to get
          required: false
          schema:
            type: number
        - name: sellerID
          in: query
          description: The ID of the seller whose products to get
          required: false
          schema:
            type: string
      responses:
        '200':
          description: The products matching the query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: No products found
  /nearest:
    get:
      tags:
        - Product
      summary: Get the nearest product to a location
      parameters:
        - name: name
          in: query
          description: The name of the product to search for
          required: true
          schema:
            type: string
        - name: _id
          in: query
          description: The ID of the product to search for
          required: false
          schema:
            type: string
        - name: location
          in: query
          description: Your current location as latitude and longitude, in the format "latitude,longitude"
          required: false
          schema:
            type: array
            items:
              type: number
              format: float
              minimum: -180
              maximum: 180
              example: [30.731071458055045, 32.22764122164489]
      responses:
        '200':
          description: A list of products sorted by distance from the given location
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductWithDistance'
        '400':
          description: The request was improperly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No products were found that match the given criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /product/{productID}:
    put:
      tags:
        - Product
      summary: Update a product
      parameters:
        - name: productID
          in: path
          description: The ID of the product to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated product data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductData'
      responses:
        '200':
          description: The product was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedProduct'
        '400':
          description: The request was improperly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The authenticated user is not authorized to update the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The product with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a product
      tags:
        - Product      
      parameters:
        - name: productID
          in: path
          description: The ID of the product to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: The product was deleted successfully
        '400':
          description: The request was improperly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: The authenticated user is not authorized to delete the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: The product with the given ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /machine:
    post:
      tags:
        - Machine
      summary: Create a new vending machine
      requestBody:
        description: Request body containing the name and location of the vending machine.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
      responses:
        '201':
          description: The vending machine was created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        '400':
          description: Bad request due to invalid request data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: The error message.
                    example: Invalid request data.
                  errors:
                    type: array
                    description: An array of validation errors.
                    items:
                      type: object
                      properties:
                        message:
                          type: string
                          description: The error message.
                          example: 'must be a string'
                        path:
                          type: array
                          description: The path to the invalid data in the request body.
                          items:
                            type: string
                          example: ['name']
      security:
        - isAuthenticated: []
        - accessJWT: []
        - role: [admin]
    x-codegen-request-body-name: body
    get:
      tags:
        - Machine    
      summary: Retrieves a list of vending machines based on query parameters
      parameters:
        - name: page
          in: query
          description: The page number of the returned list of vending machines
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 300
        - name: name
          in: query
          description: The name of the vending machine to retrieve
          required: false
          schema:
            type: string
            minLength: 5
            maxLength: 255
        - name: location
          in: query
          description: The location of the vending machine to retrieve, represented as an array of longitude and latitude values
          required: false
          schema:
            type: array
            items:
              type: number
              minimum: -180
              maximum: 180
            minItems: 2
            maxItems: 2
        - name: _id
          in: query
          description: The ID of the vending machine to retrieve
          required: false
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /machine/nearest/{longitude}/{latitude}:
    get:
      tags:
        - Machine
      summary: Retrieves the nearest vending machine to the specified longitude and latitude
      parameters:
        - name: longitude
          in: path
          description: The longitude of the current location
          required: true
          schema:
            type: number
            minimum: -180
            maximum: 180
        - name: latitude
          in: path
          description: The latitude of the current location
          required: true
          schema:
            type: number
            minimum: -90
            maximum: 90
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                required:
                  - message
  /machine/{machineID}:
    put:
      tags:
        - Machine
      description: Updates the specified vending machine.
      parameters:
        - name: machineID
          in: path
          required: true
          description: The ID of the vending machine to update.
          schema:
            type: string
      requestBody:
        description: The updated details of the vending machine.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 5
                  maxLength: 255
                location:
                  type: array
                  items:
                    type: number
                  minItems: 2
                  maxItems: 2
                  example: [30.849865904249214, 32.30459880152494]
      responses:
        '200':
          description: The updated vending machine.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: update succesfully
                  updatedMachine:
                    type: object
                    properties:
                      _id:
                        type: string
                      name:
                        type: string
                      products:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      location:
                        type: object
                        properties:
                          type:
                            type: string
                            example: Point
                          coordinates:
                            type: array
                            items:
                              type: number
                            example: [30.849865904249214, 32.30459880152494]
                      __v:
                        type: number
                        example: 0
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                    path:
                      type: array
                      items:
                        type: string
                    type:
                      type: string
                    context:
                      type: object
                      properties:
                        pos:
                          type: number
                        value:
                          type: number
                        label:
                          type: string
                        key:
                          type: number
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
      security:
        - isAuthenticated: []
        - accessJWT: []
        - role: [admin]
    delete:
      tags:
        - Machine
      description: Deletes the specified vending machine.
      parameters:
        - name: machineID
          in: path
          required: true
          description: The ID of the vending machine to delete.
          schema:
            type: string
      responses:
        '200':
          description: The specified vending machine has been deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: deleted succesfully
        '404':
          description: The specified vending machine was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  path:
                    type: string
                    example: machine ID
                  message:
                    type: string
                    example: no machine found
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: your aren't authorized, only admin role can perform this action
      security:
        - isAuthenticated: []
        - accessJWT: []
        - role: [admin]
  /payment/deposit:
    post:
      tags:
        - Payment
      description: Deposits money to the user's vending machine account balance.
      requestBody:
        description: The deposit amount.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  enum: [5, 10, 20, 50, 100]
      responses:
        '201':
          description: The deposit was successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deposit successful
                  accountBalance:
                    type: integer
                    example: 20
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                    path:
                      type: array
                      items:
                        type: string
                    type:
                      type: string
                    context:
                      type: object
                      properties:
                        valids:
                          type: array
                          items:
                            type: integer
                          example: [5, 10, 20, 50, 100]
                        label:
                          type: string
                          example: amount
                        value:
                          type: integer
                          example: 32
                        key:
                          type: string
                          example: amount
        '403':
          description: Forbidden.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: your aren't authorized, only buyer role can perform this action
      security:
        - isAuthenticated: []
        - accessJWT: []
        - role: [buyer]
  /payment/buy:
    post:
      tags:
        - Payment
      description: Buys one or more products and creates an order.
      requestBody:
        description: The product IDs and quantities to buy.
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productsIDs
                - quantites
              properties:
                productsIDs:
                  type: array
                  description: The IDs of the products to buy.
                  items:
                    type: string
                quantites:
                  type: array
                  description: The quantities of the products to buy.
                  items:
                    type: integer
              example:
                productsIDs: ["64811aedec72f5580f27f39a","64811b93ec72f5580f27f3a5"]
                quantites: [3, 2]
      responses:
        '201':
          description: The order was created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: ordered succesfully
                  order:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderItem'
                  orderTotalCost:
                    type: integer
                    example: 73
                  remainingChange:
                    type: object
                    additionalProperties:
                      type: integer
                      example: 1
        '400':
          description: Bad Request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid request
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Error'
      security:
        - isAuthenticated: []
        - accessJWT: []
        - role: [buyer]
    x-constraints:
      - prodcutExist
      - balance     
      
  /payment/reset:
    put:
      tags:
        - Payment
      summary: "Reset user's balance"
      description: "Reset the user's deposit to zero and return the remaining change in coins (5, 10, 20, 50, or 100)."
      responses:
        '201':
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Success message"
                  remainingChange:
                    type: object
                    description: "Remaining change in coins"
                    additionalProperties:
                      type: integer
                      description: "Number of coins"
                      enum: [5, 10, 20, 50, 100]
              example:
                message: "your deposit reset succesfull"
                remainingChange:
                  5: 1
                  20: 4
                  50: 2
      security:
        - isAuthenticated: []
        - accessJWT: []
        - role: [buyer]
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "647fffd15f8fe223d799afa3"
        userName:
          type: string
          example: "ahmed eid 1"
        role:
          type: string
          enum:
            - buyer
            - seller
          example: "buyer"
        deposit:
          type: number
          format: float
          example: 0
        orders:
          type: array
          items:
            type: object
          example: []
      required:
        - _id
        - userName
        - role
        - deposit
        - orders

    UserRegistration:
      type: object
      properties:
        userName:
          type: string
          description: "User's name"
        password:
          type: string
          description: "User's password"
        role:
          type: string
          enum:
            - buyer
            - seller
          description: "User's role at vending machine"
      required:
        - userName
        - password
        - role

    UserRegistrationResponse:
      type: object
      properties:
        message:
          type: string
          example: "register successfully"
        user:
          $ref: "#/components/schemas/User"
      required:
        - message
        - user

    UserLogin:
      type: object
      properties:
        userName:
          type: string
          description: "User's name"
        password:
          type: string
          description: "User's password"
      required:
        - userName
        - password

    UserLoginResponse:
      type: object
      properties:
        message:
          type: string
          example: "login successfully"
        user:
          $ref: "#/components/schemas/User"
      required:
        - message
        - user

    LogoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "logged out"
      required:
        - message
    Product:
      type: object
      properties:
        name:
          type: string
          description: The name of the product
        cost:
          type: number
          description: The cost of the product
        amountAvailable:
          type: number
          description: The amount of the product available in the vending machine
        sellerID:
          type: string
          description: The ID of the seller who added the product
        machineID:
          type: string
          description: The ID of the vending machine where the product is available
        location:
          type: object
          properties:
            type:
              type: string
              description: The type of location data (Point)
            coordinates:
              type: array
              items:
                type: number
              description: The coordinates of the vending machine
      required:
        - name
        - cost
        - amountAvailable
    Machine:
      type: object
      required:
        - name
        - location
      properties:
        name:
          type: string
          description: The name of the vending machine.
          minLength: 5
          maxLength: 255
          example: Machine 1
        location:
          type: object
          description: The location of the vending machine, represented as a GeoJSON Point object.
          properties:
            type:
              type: string
              description: The type of GeoJSON object, which must be "Point".
              example: Point
            coordinates:
              type: array
              description: The coordinates of the vending machine's location, represented as a pair of longitude and latitude values.
              items:
                type: number
              example: [30.62117421929575, 32.26839881018151]
        products:
          type: array
          description: The products available in the vending machine.
          items:
            $ref: '#/components/schemas/Product'
      example:
        name: Machine 1
        location:
          type: Point
          coordinates: [30.62117421929575, 32.26839881018151]
        products:
          - name: Coke
            price: 1.5
            quantity: 20
          - name: Chips
            price: 2.0
            quantity: 15
    Error:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    ProductWithDistance:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the product
        name:
          type: string
          description: The name of the product
        cost:
          type: number
          format: float
          description: The cost of the product
        amountAvailable:
          type: integer
          description: The number of units of the product available for purchase
        sellerID:
          type: string
          description: The ID of the seller of the product
        machineID:
          type: string
          description: The ID of the vending machine that dispenses the product
        location:
          type: object
          properties:
            type:
              type: string
              description: The type of location data (always "Point")
              example: "Point"
            coordinates:
              type: array
              description: The latitude and longitude of the location as an array in the format [longitude, latitude]
              items:
                type: number
                format: float
                minimum: -180
                maximum: 180
              example: [30.596792908334017, 32.27660266724352]
          description: The location of the vending machine that dispenses the product
        createdAt:
          type: string
          format: date-time
          description: The date and time when the product was added to the system
        updatedAt:
          type: string
          format: date-time
          description: The date and time when the product was last updated in the system
        __v:
          type: integer
          description: The version number of the product document in the database
        distance:
          type: number
          format: float
          description: The distance from the given location to the vending machine that dispenses the product, in meters
          example: 13766.318647161375
    UpdateProductData:
      type: object
      properties:
        name:
          type: string
          description: The updated name of the product
          example: "New product name"
        cost:
          type: number
          format: float
          description: The updated cost of the product
          example: 1.5
        amountAvailable:
          type: integer
          description: The updated number of units of the product available for purchase
          example: 10
    UpdatedProduct:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier of the updated product
        name:
          type: string
          description: The updated name of the product
        cost:
          type: number
          format: float
          description: The updated cost of the product
        amountAvailable:
          type: integer
          description: The updated number of units of the product available for purchase
        sellerID:
          type: string
          description: The ID of the seller of the product
        machineID:
          type: string
          description: The ID of the vending machine that dispenses the product
        location:
          type: object
          properties:
            type:
              type: string
              description: The type of location data (always "Point")
              example: "Point"
            coordinates:
              type: array
              description: The updated latitude and longitude of the location in the format "longitude, latitude"
              items:
                type: number
                format: float
                example: [32.22764122164489, 30.731071458055045]
    OrderItem:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        cost:
          type: integer
        amountAvailable:
          type: integer
        sellerID:
          type: string
        machineID:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        __v:
          type: integer
        totalCost:
          type: integer
        quantity:
          type: integer
      required:
        - _id
        - name
        - cost
        - amountAvailable
        - sellerID
        - machineID
        - totalCost
        - quantity
  securitySchemes:
    isAuthenticated:
          type: apiKey
          name: accessJWT
          in: cookie
    accessJWT:
      type: apiKey
      name: accessJWT
      in: cookie
    role:
      type: apiKey
      name: accessJWT
      in: cookie